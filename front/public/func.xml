<?xml version="1.0" encoding="utf-8" ?>
<functions>
  <catalogy name="数据集">
    <function  name="group()" >
      函数说明：
      根据分组表达式，从数据集中选出符合过滤条件的一组组集。

      语法：
      datasetName.group( select_exp
      [filter_exp] )

      功能说明：
      在不需要排序或数据集中已经按需要排好序时，为提高效率请如下使用此函数
      datasetName.group( select_exp, filter_exp)

      参数说明：
      select_exp：	选出的分组表达式，可以是字段列名，也可以是以“#列序号”的形
      式，#0表示记录行号，#1表示数据源中的第一个字段列......以此类推。
      当然也可以是表达式
      filter_exp: 	数据过滤表达式。

      函数示例：
      ds1.group( name )
      从数据源ds1中选取name字段，并按照name列进行分组，取出每一组第一条记
      录的name字段的值, 不排序

      ds1.group( name,sex=='1').asc()
      从数据源ds1中选取性别为男性的name字段列的值并升序排列，然后按照name
      字段进行分组，取出每一组第一条记录的name字段的值

      ds1.group( name, sex=='1').desc(id)
      从数据源ds1中选取性别为男性的name字段列的值并按id字段降序排列，然后按
      照name字段进行分组，取出每一组第一条记录的name字段的值

      图例：
      从图中可以看出，group函数选取了一组组集，把每个组集中第一条记录取出来，获得该记录的selectExp字段值，该字段值保留了一个指针，指向每一组的第一条记录，而该记录保留了一个指针指向相应的组集。因此在当前格的子格里，如果采取get, group函数，则缺省从当前格指向的组集里取数；如果采取dsn.colname的表达式，则缺省从当前格指向的组集的第一条记录里取数。
      因此，在当前格的子格里如果采取get/group函数，不需要再加上和顶格相关的过滤条件。

      返回值：
      一组数据的集合

    </function>
    <function  name="scope(,list(,))" >
      函数说明：
      根据完全划分进行分组
      语法:
      datasetName.scope( selectExp, listExp[, filterExp][, eqExp][, ascExp] )
      参数说明：
      selectExp       取值表达式
      ListExp          返回同valueExp数据类型相同的数组，要求其中元素从小到大排列
      filterExp 过滤表达式
      eqExp            返回布尔值的表达式，缺省为false，前开后闭。表示与前面元素比较时不包含等于，和后面元素比较时包含等于
      ascExp           返回布尔值的表达式，缺省为true，表示listExp返回的数组按从小到大排，否则为从大到小排
      特别说明：
      ascExp为true(即listExp从小到大排列)时，eqExp为true时，与元素比较时采用&lt;=，eqExp为false时，采用&lt;
ascExp为false(即listExp从大到小排列)时，eqExp为true时，与元素比较时采用&gt;=，eqExp为false时，采用&gt;
示例：
ds1.scope(age,list(15,40))
<![CDATA[表示： <=15 , >15 and <=40,>40 ]]>
    </function>
    <function  name="select()" >
      select(select_expr[,cond_expr])
    </function>

    <function  name="distinct_count()" >
      distinct_count(select_expr[,cond_expr])
    </function>
    
    <function  name="sum()" >
      ds.sum(被累加的表达式，条件)
      满足条件的数据集中的被累加的表达式的求和
    </function>
    <function  name="max()" >
      ds.sum(被计算的表达式，条件)
      满足条件的数据集中的被累加的表达式的求最大
    </function>
    <function  name="min()" >
      ds.sum(被计算的表达式，条件)
      满足条件的数据集中的被累加的表达式的求最小
    </function>
    <function  name="avg()" >
      ds.avg(被计算的表达式，条件)
      满足条件的数据集中的被累加的表达式的求平均
    </function>
    <function  name="select1()" ></function>
    <function  name="colcount()" >
函数说明：
数据集的列数
语法：
datasetName.cols()
    </function>
    <function  name="count()" >
      ds.sum(条件)
      满足条件的数据集中的个数
    </function>
    <function  name="colName()" >
      ds.colName(col_cnt)
      数据集的第col_cnt列的名字
    </function>
    <function  name="valueForColName()" >
      函数说明：
      取数据集的列
      语法：
      datasetName.valueForColName( stringExp )
      datasetName.valueForColName( intExp )
      参数说明：
      stringExp 	返回数据集列名的表达式
      intExp		返回数据集列号的表达式
    </function>
    <function  name="getDataSourceName()" >
      函数说明：
      取数据集的的数据源名称
      语法：
      datasetName.getDataSourceName( )
    </function>
  </catalogy>
  <catalogy name="常用计算">
    <catalogy name="数学运算">
      <function  name="+" ></function>
      <function  name="-" ></function>
      <function  name="*" ></function>
      <function  name="/" ></function>
      <function  name="&amp;" >取地址</function>
    </catalogy>
    <catalogy name="逻辑运算">
      <function  name=">" ></function>
      <function  name=">=" ></function>
      <function  name="&lt;" ></function>
      <function  name="&lt;=" ></function>
      <function  name="==" ></function>
      <function  name="&amp;&amp;" ></function>
      <function  name="||" ></function>

    </catalogy>
  </catalogy>
  <catalogy name="单元格函数">
    <function  name="ifEmpty(,)" >
      函数说明：
      从前往后，参数如果不为null或空字符串，就返回当前参数值，如果都是为空，就返回""
      语法：
      ifEmpty(ValueExp1, ValueExp2,..... )
    </function>
      <function  name="iif(,,)" >
      函数说明：
      根据布尔表达式的不同结果，返回不同的值
      语法：
      iif(boolExp, trueValueExp, falseValueExp)
      参数说明：
      boolExp			结果为布尔类型的表达式
      trueValueExp		布尔表达式为真时，返回本参数的计算结果，本参数可以是常数或表达式
      falseValueExp		布尔表达式为假时，返回本参数的计算结果，本参数可以是常数或表达式

    例子：iif（param.xxx=='1','x1',param.yyy==2,'x2','x3')
      解释：当param.xxx==1时,返回x1，param.yyy==2时，返回x2，否则返回x3
      优先判断前面的条件

    </function>
    <function  name="switchCase(,,)" >
      switchCase( expr ,[comparison_expr1 ,return_expr1]? ,else_expr)
      在switchCase中，会搜索expr 等于comparison_expr的第一对when then，然后返回return_expr.如果没有满足条件的when then 并且存在ELSE子句，
      那么会返回else_expr，否则会返回空值。
      例子：switchCase（param.xxx,1,'x1',2,'x2','x3')
      解释：当param。xxx为1时,返回x1，为2时，返回x2，否则返回x3
    </function>
    <function  name="list(,)" >
函数说明：
获得一个枚举的数据集合
语法：
list(valueExp1{,valueExp2{,valueExp3{,……}}})
参数说明：
valueExp(n)		可以是常数或表达式
返回值：
一组数据的集合
    </function>
    <function  name="findInMap(,)" >
函数说明：
显示值对照表函数:，从对照表中找出当前单元格对应值的显示值，没有则返回null
语法：
map(valueListExp, displayListExp)
参数说明：
valueListExp		真实值列表，可以是可扩展单元格或结果为集合列表的表达式
displayListExp	显示值列表，可以是可扩展单元格或结果为集合列表的表达式

真实值列表和显示值列表一一对应
    </function>
    <function  name="sum()" >参数必须是列表</function>
    <function  name="max()" >参数必须是列表</function>
    <function  name="min()" >参数必须是列表</function>
    <function  name="avg()" >参数必须是列表</function>
    <function  name="fromto(,)" >
      fromto(开始值，结束值，步长）
      如：fromto(1,20) 缺省步长为1
      fromto(1,20,2)
    </function>
    <function  name="row()" >
函数说明：
取得当前格所有行的行号
语法：
row()
    </function>
    <function  name="col()" >
函数说明：
取得当前单元格所在列的列号
语法：
col()

    </function>

    <function  name="cellColName()" >
      函数说明：
      取得当前单元格所在列的列名
      语法：
      cellColName()
    </function>


    <function  name="query(,)" >
      query(数据库连接名字,sql语句)
    </function>
    <function  name="range_count(,)" >
      range_count(单元格列表,值1,是否相等,值2,是否相等)
      单元格列表中 大于值1 小于 值2的有多少个
      是否相等：缺省为相等
    </function>

    <function  name="@vaule" >本单元格的实际值</function>
    <function  name="floor()" >
      取带小数点的数字的地板值
      floor(3.5)=4
    </function>
    <function  name="ceiling()" >
      取带小数点的数字的天板值
      ceiling(3.5)=3</function>
  </catalogy>
  <catalogy name="集合函数">
    <function  name="union_set()" >
      使用方法：union_set([ds.group(ds.key)]+, (sort)? )
      对各分组集合的ds.key求并集
    </function>
    <function  name="intersection_set()" >
      使用方法：intersection_set([ds.group(ds.key)]+, (sort)? )
      对各分组集合的ds.key求交集
    </function>
    <function  name="subtract_set()" >
      使用方法：subtract_set([ds.group(ds.key)]+, (sort)? )
      以第一个分组为主集合，减去其他各集合的元素
    </function>
    <function  name="leftJoin_set(,,)" >
      求集合的左外连接集
      leftJoin:分两种情况，一种是第一个参数是类似ds.select(ds.aa),那么第二个参数可以是ds中的任意其他字段
      第二种情况是：第一个参数ds.group(ds.xx),那么第二个参数必须也是ds.xx，否则就会造成数据混乱
      第三个参数可以是任意其他集合计算.
      该方法将会先计算第一、三个参数的数据集，然后计算循环第一个数据集中的每条数据，
      按第二个参数取第三个数据集中对应的项目添加到第一个数据集中
      显示值与连接条件没有关系
      例子：
      =leftJoin_set(
      ds_quanyuan.select(ds_quanyuan.xxxx),
      ds_quanyuan.fullsalesno,
      union_set(
      ds.select(ds.fullsalesno),
      sz_kehu.select(sz_kehu.fullsalesno)
      )
      单元格显示的值将为：ds_quanyuan.xxxx,
      )
    </function>

  </catalogy>
  <catalogy name="日期函数">
    <function  name="date(,,)" >
      使用方法：
      date(year,month,day)
    </function>
    <function  name=".AddDays()" >
      必须是日期型变量才能使用
      使用方法：date(2014,1,2).AddDays(-1)
      结果：2014-1-1
    </function>
    <function  name=".AddMonths()" >
      必须是日期型变量才能使用
      使用方法：date(2014,2,2).AddMonths(-1)
      结果：2014-1-2
    </function>
    <function  name=".AddYears()" >
      必须是日期型变量才能使用
      使用方法：date(2014,2,2).AddYears(-1)
      结果：2013-2-2
    </function>
    <function   name="today()" >  当天  </function>
    <function  name="prevDay()" >  昨天  </function>
    <function  name="firstDayOfYear()" >  指定日期的当年第一天  </function>
    <function  name="prevMonth()" >  上月同一天  </function>
    <function  name="prevYear()" >  上年同一天  </function>
    <function  name="quaterEnd()" >  本季度最后一天  </function>
    <function  name="quaterBegin()" > 本季度第一天   </function>
    <function  name="monthEnd()" >  本月最后一天  </function>
    <function  name="monthBegin()" > 本月第一天   </function>
    <function  name="weekBegin()" >  本周第一天  </function>
    <function  name="weekEnd()" > 本周最后一天   </function>
    <function  name="weekNum()" > 星期几   </function>
    <function  name="year()" >  年  </function>
    <function  name="quater()" >  季度  </function>
    <function  name="month()" >  月  </function>
    <function  name="dayOfYear()" > 本年的几天   </function>
    <function  name="dayOfMonth()" > 本月的几天   </function>
    <function  name="hour()" > 24小时制的小时   </function>
    <function  name="minute()" > 分钟   </function>
    <function  name="second()" > 秒   </function>
    <function  name="formatDatetime()" >
格式化日期
G 年代标志符   y 年   M 月   d 日
h 时 在上午或下午 (1~12)   H 时 在一天中 (0~23)
m 分   s 秒   S 毫秒   E 星期   D 一年中的第几天
F 一月中第几个星期几   w 一年中第几个星期   W 一月中第几个星期
a 上午 / 下午 标记符   k 时 在一天中 (1~24)
K 时 在上午或下午 (0~11)
z 时区

缺省格式为：yyyy-MM-dd
如果第一个参数不是日期类型，那么将使用缺省格式分析该字符串，将之装换为日期后再格式化
举例：formatDatetime('2007-01-01','yyyy年MM月dd日HH时mm分ss秒')
formatDatetime('2007-01-01')
    </function>
  </catalogy>
  <catalogy name="图表函数">
    <function  name=' chart_singel_serial("Charts/.swf","","",,)' >
      使用方法：
      chart_singel_serial(图类型,图的属性,图的其他属性,目录列表, 图的数据集列表)
      例：chart_singel_serial("Charts/Bar2D.swf","","",ds.slect(ds.xxx),ds.yyy)
      Bar2D,Column2D, Column3D, Pie3D, Pie2D, Line, Bar2D, Area2D, Doughnut2D, Doughnut3D
    </function>
    <function  name=' chart_mutil_serial("Charts/.swf","","",list(,), , ,"")' >
      使用方法：
      chart_mutil_serial(图类型,图的属性,图的其他属性,目录列表, 图的数据集列表,数据列的其他属性)
      例：=chart_mutil_serial('Charts/MSColumn3D.swf','','',list('本期','累计'),b5{},c5,d5，"")
      注意最后一个参数不是显示数据用的，是为了控制诸如双坐标等属性的。
      MSColumn2D, MSColumn3D, MSLine, MSArea, MSBar2D, MSBar3D
    </function>

  </catalogy>
  <catalogy name="字符串函数">
    <function  name="replaceStr(,,)" >
      query(源字符串,被替换字符串,替换字符串)
    </function>
    <function  name="substring(,,)" >
      substring(源字符串,开始位置,结束位置)
    </function>
    <function  name="length()" >
      length(字符串) 字符串长度
    </function>
    <function  name="indexof(,,)" >
      indexof(目标字符串,被查找字符串,(开始查找的位置)?)
    </function>
    <function  name="isEmpty()" >
      isEmpty(目标)
      如果目标为NULL返回true
      如果不是字符串,做toString()后作为字符串判断
      如果是字符串，且等于"",返回true
    </function>   
    <function  name="formatNumber()" >
      格式化数字。
      缺省格式：###########0.##
      如： formatNumber(1234.567) 输出为 1234.57
      如要指定格式，在第二个参数写格式。
      如：formatNumber(1234,567,"#####.0000")输出为：1234.5670

    </function>
  </catalogy>
  <catalogy name="其他">
    <function  name="getObject()" >
      函数说明：
      构造指定类型的对象。用户可以将有关的dll或源码文件放在bin/plugins下，
      然后通过类似getObject("TestDataSet.Class1")调用，构造一个类型为TestDataSet.Class1
      的对象，然后可以直接执行该对象的方法。加入该对象有一个方法加public DataSet aaa(String a)
      ，这时候就可以用类似方法调用：getObject("TestDataSet.Class1").aaa("11"),表达式将
      范围一个类型为DataSet的对象。
      getObject中的参数为类型的名称，该类必须继承自MarshalByRefObject。如果不是，请使用
      函数getObjectAndExec。
      语法：
      getObject("TestDataSet.Class1")
    </function>
    <function  name="getObjectAndExec()" >
      函数说明：
      构造指定类型的对象,然后执行指定的函数。构造对象参考函数getObject。这里的对象不需要继承
      自MarshalByRefObject。
      第一个参数是对象的类型名称，第二个参数是方法名称，之后的都是作为方法的参数传递给函数使用。
      语法：
      =getObjectAndExec("TestDataSet.Class1","aaa","11")
    </function>

    <function  name="getCurrentSqlDataSourceName()" >
      函数说明：
      取当前运行的sql的数据源连接名称，只能在sql语句引用的内部参数使用，
      在其他地方使用没有效果
      语法：
      getCurrentSqlDataSourceName( )
    </function>
    <function  name="getAllDataSourceName()" >
      函数说明：
      取当前运行环境下的所有数据源连接名称列表
      语法：getAllDataSourceName( )
    </function>
    <function  name="getHttpRequestValue()" >
      函数说明：
      取当前运行环境下的HttpRequest中的值
      由于IIS的特殊要求，其中的每个值都是一个List的列表，在判断其中的值的时候，可以使用函数CollectionContain判断
      语法：getHttpRequestValue(key)
      可能有用的属性：
      REMOTE_HOST
      HTTP_REFERER
      URL
      SCRIPT_NAME
    </function>
    <function  name="getHttpSessionValue()" >
      函数说明：
      取当前运行环境下的HttpSession中的值
      用户信息一般是在这里存取
      如果存放的值为一个集合，可以使用CollectionContain判断是否包含某个值
      语法：getHttpSessionValue(key )
    </function>
    <function  name="CollectionContain(,)" >
      函数说明：
      判断集合是否包含某个值
      语法：CollectionContain(collection,key )
    </function>

  </catalogy>

</functions>
